#一些逻辑

### load\_all\_postdata.js 是怎么完成的

我把所有的postadata数据在`_include/postadata.html`下生成了，不过将其赋值给了模板变量，而不再像以前一样把它直接作为字符串，然后嵌入到文件中。

有两个考虑：

1. 想作为外部Js文件加载而不再嵌入到HTML中。
    
    因为之后我要分类了。这个文件应该是会被类别文件引用的，因为操作JS还是比操作liquid简单一些，所以就放弃了体积的考虑，决定先把整个postadata给引入，然后再筛选。

    在这种情况下，如果我把postdata作为外部文件，由于浏览器的缓存作用，肯定能够减少访问次数，所以应该不会带来额外的开销。

2. 去除postdata中冗余的符号

    因为使用liquid语法时，包含有空格、回车等，这无疑增加了其体积。但是`{% %}`又不能直接跟上过滤函数，所以选择了上面的方式，先在`include`中使用`capture`标签将其保存为一个变量，在需要的js文件中先引入该变量（用过`include`标签，获取我把这个变量保存为site的子变量，应该就能够全局引用了。不过也必要这么做也没什么不好的）

    然后使用`{{ postdata | strip_newlines | remove: ' ' }}`来去除空行（回车）和空白符。效果不错。

# PS

Pages里的Jekyll更新后突然解析这里的MD文件了... 都没有加yaml头啊，没办法，改成.txt后缀了。